// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tecnocim.Alia.DataInfrastructure;

#nullable disable

namespace Tecnocim.Alia.DataInfrastructure.Migrations
{
    [DbContext(typeof(SmartdebtContext))]
    [Migration("20220913224145_AddEquivalencias")]
    partial class AddEquivalencias
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Tecnocim.Alia.Domain.Empresa", b =>
                {
                    b.Property<int>("EmpresaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpresaId"), 1L, 1);

                    b.Property<string>("CIF")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Contacto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Created")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime?>("Deleted")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("Updated")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.HasKey("EmpresaId")
                        .HasName("PK_Empresa");

                    b.ToTable("Empresas");

                    b.HasData(
                        new
                        {
                            EmpresaId = 1,
                            CIF = "CIF 1",
                            Contacto = "Contacto 1",
                            Created = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(4695),
                            Email = "info@empresa1.com",
                            Nombre = "Empresa 1",
                            Telefono = "654595851",
                            Updated = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(4695)
                        },
                        new
                        {
                            EmpresaId = 2,
                            CIF = "CIF 2",
                            Contacto = "Contacto 2",
                            Created = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(4695),
                            Email = "info@empresa2.com",
                            Nombre = "Empresa 2",
                            Telefono = "654595852",
                            Updated = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(4695)
                        },
                        new
                        {
                            EmpresaId = 3,
                            CIF = "CIF 3",
                            Contacto = "Contacto 3",
                            Created = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(4695),
                            Email = "info@empresa3.com",
                            Nombre = "Empresa 3",
                            Telefono = "654595853",
                            Updated = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(4695)
                        },
                        new
                        {
                            EmpresaId = 4,
                            CIF = "CIF 4",
                            Contacto = "Contacto 4",
                            Created = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(4695),
                            Email = "info@empresa4.com",
                            Nombre = "Empresa 4",
                            Telefono = "654595854",
                            Updated = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(4695)
                        },
                        new
                        {
                            EmpresaId = 5,
                            CIF = "CIF 5",
                            Contacto = "Contacto 5",
                            Created = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(4695),
                            Email = "info@empresa5.com",
                            Nombre = "Empresa 5",
                            Telefono = "654595855",
                            Updated = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(4695)
                        },
                        new
                        {
                            EmpresaId = 6,
                            CIF = "CIF 6",
                            Contacto = "Contacto 6",
                            Created = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(4695),
                            Email = "info@empresa6.com",
                            Nombre = "Empresa 6",
                            Telefono = "654595856",
                            Updated = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(4695)
                        },
                        new
                        {
                            EmpresaId = 7,
                            CIF = "CIF 7",
                            Contacto = "Contacto 7",
                            Created = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(4695),
                            Email = "info@empresa7.com",
                            Nombre = "Empresa 7",
                            Telefono = "654595857",
                            Updated = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(4695)
                        },
                        new
                        {
                            EmpresaId = 8,
                            CIF = "CIF 8",
                            Contacto = "Contacto 8",
                            Created = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(4695),
                            Email = "info@empresa8.com",
                            Nombre = "Empresa 8",
                            Telefono = "654595858",
                            Updated = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(4695)
                        },
                        new
                        {
                            EmpresaId = 9,
                            CIF = "CIF 9",
                            Contacto = "Contacto 9",
                            Created = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(4695),
                            Email = "info@empresa9.com",
                            Nombre = "Empresa 9",
                            Telefono = "654595859",
                            Updated = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(4695)
                        },
                        new
                        {
                            EmpresaId = 10,
                            CIF = "CIF 10",
                            Contacto = "Contacto 10",
                            Created = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(4695),
                            Email = "info@empresa10.com",
                            Nombre = "Empresa 10",
                            Telefono = "654595860",
                            Updated = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(4695)
                        });
                });

            modelBuilder.Entity("Tecnocim.Alia.Domain.EmpresaConfiguraciones", b =>
                {
                    b.Property<int>("EmpresaConfiguracionesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpresaConfiguracionesId"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime?>("Deleted")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("FicheroConfiguracion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("PorDefecto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Updated")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.HasKey("EmpresaConfiguracionesId")
                        .HasName("PK_EmpresaConfiguraciones");

                    b.HasIndex("EmpresaId");

                    b.ToTable("EmpresaConfiguraciones");

                    b.HasData(
                        new
                        {
                            EmpresaConfiguracionesId = 1,
                            Created = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(5508),
                            EmpresaId = 1,
                            Fecha = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(5535),
                            FicheroConfiguracion = "fichero 1",
                            PorDefecto = true,
                            Updated = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(5508)
                        },
                        new
                        {
                            EmpresaConfiguracionesId = 2,
                            Created = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(5508),
                            EmpresaId = 2,
                            Fecha = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(5622),
                            FicheroConfiguracion = "fichero 2",
                            PorDefecto = false,
                            Updated = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(5508)
                        },
                        new
                        {
                            EmpresaConfiguracionesId = 3,
                            Created = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(5508),
                            EmpresaId = 3,
                            Fecha = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(5624),
                            FicheroConfiguracion = "fichero 3",
                            PorDefecto = true,
                            Updated = new DateTime(2022, 9, 13, 22, 41, 32, 53, DateTimeKind.Utc).AddTicks(5508)
                        });
                });

            modelBuilder.Entity("Tecnocim.Alia.Domain.EquivalenciasEntidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id")
                        .HasName("PK_EquivalenciasEntidad");

                    b.ToTable("EquivalenciasEntidades");
                });

            modelBuilder.Entity("Tecnocim.Alia.Domain.EquivalenciasMoneda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id")
                        .HasName("PK_EquivalenciasMoneda");

                    b.ToTable("EquivalenciasMonedas");
                });

            modelBuilder.Entity("Tecnocim.Alia.Domain.EquivalenciasNatinterv", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id")
                        .HasName("PK_EquivalenciasNatinterv");

                    b.ToTable("EquivalenciasNatintervs");
                });

            modelBuilder.Entity("Tecnocim.Alia.Domain.EquivalenciasPersonal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id")
                        .HasName("PK_EquivalenciasPersonal");

                    b.ToTable("EquivalenciasPersonales");
                });

            modelBuilder.Entity("Tecnocim.Alia.Domain.EquivalenciasPlazo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id")
                        .HasName("PK_EquivalenciasPlazo");

                    b.ToTable("EquivalenciasPlazos");
                });

            modelBuilder.Entity("Tecnocim.Alia.Domain.EquivalenciasProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id")
                        .HasName("PK_EquivalenciasProducto");

                    b.ToTable("EquivalenciasProductos");
                });

            modelBuilder.Entity("Tecnocim.Alia.Domain.EquivalenciasReal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id")
                        .HasName("PK_EquivalenciasReal");

                    b.ToTable("EquivalenciasReales");
                });

            modelBuilder.Entity("Tecnocim.Alia.Domain.EquivalenciasSituoper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id")
                        .HasName("PK_EquivalenciasSituoper");

                    b.ToTable("EquivalenciasSituopers");
                });

            modelBuilder.Entity("Tecnocim.Alia.Domain.EquivalenciasSolcol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("PK_EquivalenciasSolcol");

                    b.ToTable("EquivalenciasSolcols");
                });

            modelBuilder.Entity("Tecnocim.Alia.Domain.EquivalenciasTipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id")
                        .HasName("PK_EquivalenciasTipo");

                    b.ToTable("EquivalenciasTipos");
                });

            modelBuilder.Entity("Tecnocim.Alia.Domain.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefreshTokenId"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("RefreshTokenId")
                        .HasName("PK_RefreshToken");

                    b.HasIndex(new[] { "UsuarioId" }, "IX_RefreshTokens_UsuarioId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Tecnocim.Alia.Domain.Rol", b =>
                {
                    b.Property<int>("RolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RolId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolId"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RolId")
                        .HasName("PK_Rol");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RolId = 1,
                            Nombre = "Admin"
                        },
                        new
                        {
                            RolId = 2,
                            Nombre = "Cliente"
                        },
                        new
                        {
                            RolId = 3,
                            Nombre = "Administrativo"
                        },
                        new
                        {
                            RolId = 4,
                            Nombre = "Financiero"
                        });
                });

            modelBuilder.Entity("Tecnocim.Alia.Domain.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UsuarioId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioId"), 1L, 1);

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime?>("Deleted")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.HasKey("UsuarioId")
                        .HasName("PK_Usuario");

                    b.HasIndex(new[] { "RolId" }, "IX_Usuarios_RolId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            UsuarioId = 1,
                            Apellidos = "Apellidos Admin",
                            Created = new DateTime(2022, 9, 13, 22, 41, 31, 298, DateTimeKind.Utc).AddTicks(3244),
                            Email = "admin@alia.com",
                            Nombre = "Usuario Admin",
                            Password = "$2a$11$GCTIlPwsqsG5Z9y6xOF4aO5Yy0OrxHapbLvqyvp4i6XHqPUEZk9q2",
                            RolId = 1,
                            Updated = new DateTime(2022, 9, 13, 22, 41, 31, 298, DateTimeKind.Utc).AddTicks(3244)
                        },
                        new
                        {
                            UsuarioId = 2,
                            Apellidos = "Apellidos Cliente 1",
                            Created = new DateTime(2022, 9, 13, 22, 41, 31, 298, DateTimeKind.Utc).AddTicks(3244),
                            Email = "cliente1@alia.com",
                            Nombre = "Usuario Cliente 1",
                            Password = "$2a$11$7r.dUxhCkxbDJEnHDZ9wa.qavaSwmegcWNhpU37l0nslEyQBsCvnK",
                            RolId = 2,
                            Updated = new DateTime(2022, 9, 13, 22, 41, 31, 298, DateTimeKind.Utc).AddTicks(3244)
                        },
                        new
                        {
                            UsuarioId = 3,
                            Apellidos = "Apellidos Cliente 2",
                            Created = new DateTime(2022, 9, 13, 22, 41, 31, 298, DateTimeKind.Utc).AddTicks(3244),
                            Email = "cliente2@alia.com",
                            Nombre = "Usuario Cliente 2",
                            Password = "$2a$11$o.ylJYylpVEYTpMdF.urmuO/3aZzSjZfHdJul20VGOzzCai/NYb6q",
                            RolId = 2,
                            Updated = new DateTime(2022, 9, 13, 22, 41, 31, 298, DateTimeKind.Utc).AddTicks(3244)
                        },
                        new
                        {
                            UsuarioId = 4,
                            Apellidos = "Apellidos Administrativo 1",
                            Created = new DateTime(2022, 9, 13, 22, 41, 31, 298, DateTimeKind.Utc).AddTicks(3244),
                            Email = "administrativo1@alia.com",
                            Nombre = "Usuario Administrativo 1",
                            Password = "$2a$11$yXQTMpdiymwiFqH/2X1gcuVCGv4.u3ti.TvMho5/CeO7peQOEQ846",
                            RolId = 3,
                            Updated = new DateTime(2022, 9, 13, 22, 41, 31, 298, DateTimeKind.Utc).AddTicks(3244)
                        });
                });

            modelBuilder.Entity("UsuarioEmpresa", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "EmpresaId")
                        .HasName("PK_UsuarioEmpresa");

                    b.HasIndex(new[] { "EmpresaId" }, "IX_UsuarioEmpresas_EmpresaId");

                    b.ToTable("UsuarioEmpresas", (string)null);
                });

            modelBuilder.Entity("Tecnocim.Alia.Domain.EmpresaConfiguraciones", b =>
                {
                    b.HasOne("Tecnocim.Alia.Domain.Empresa", "Empresa")
                        .WithMany("EmpresaConfiguraciones")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Tecnocim.Alia.Domain.RefreshToken", b =>
                {
                    b.HasOne("Tecnocim.Alia.Domain.Usuario", "Usuario")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Tecnocim.Alia.Domain.Usuario", b =>
                {
                    b.HasOne("Tecnocim.Alia.Domain.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("UsuarioEmpresa", b =>
                {
                    b.HasOne("Tecnocim.Alia.Domain.Empresa", null)
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tecnocim.Alia.Domain.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tecnocim.Alia.Domain.Empresa", b =>
                {
                    b.Navigation("EmpresaConfiguraciones");
                });

            modelBuilder.Entity("Tecnocim.Alia.Domain.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Tecnocim.Alia.Domain.Usuario", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
